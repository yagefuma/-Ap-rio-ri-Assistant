package get_data_for_apriori;


import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;


/*
 * 执行完ClassfyMalware.java后执行这个文件
 * 作用：在某一个文件夹下（窃取隐私类别文件夹）遍历所有apk，逐行输出他们中出现的权限，用不同的数字表示不同的权限，为Apriori算法提供数据
 * 注意，这里为了降维，需要修改代码中德LocalData.permissions为LocalData.reducted_permissions
*/
public class Help_Apriori_forPermissions {
	private static File file = new File("D:apriori.txt");  //存放permission的文件
	private static String apkName;  //apk名字
	private static  String cmd; //cmd语句执行aapt并保存执行结果
	
	private static String sourceFile ;
	private static int[] array = new int[127];
	public static void main(String[] args){
		File rootDirectory = new File("E:/loading_system/android/virus_getprivace/1get_callvoice/");
		File[] files = rootDirectory.listFiles();
		for(int i = 0 ; i < files.length ; i++){
			if(!files[i].isFile()){
				System.out.println("not File,"+files[i].getName());
				continue;
			}else{
				//apkName = files[i].getName();
				sourceFile = files[i].getAbsolutePath();
				cmd = "cmd /k aapt dump permissions " + sourceFile + " -t > D:apriori.txt";
				
				
				//第一步：在cmd执行aapt命令,把申请的权限保存到file文件
				getPermissions();

				//第二步，读取file文件，给数组array组赋值，代表的是该app的permissions
				assign_Array(file);
				
				System.out.println();
				//System.out.println("-------------分割线----------------");
				
				//清理干净存储数组，以便下次循环使用
				for(int j = 0 ; j < array.length ; j++){
					array[j] = 0;
				}
			}
		}
		
		
	}
	
	private static void getPermissions() {
		// TODO Auto-generated method stub
		Runtime rt = Runtime.getRuntime();
		Process p = null ;
		try {
			 p = rt.exec(cmd);
			 new Thread().sleep(5000);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally{
			if(p!=null){
				p.destroy();
			}
		}
	}

	//给数组的某一行赋值，一个应用代表一行
	public static void assign_Array(File file){
		String temp = null ;
		FileReader fileReader = null ;
		BufferedReader br = null;
		try {
			fileReader = new FileReader(file);
			br = new BufferedReader(fileReader);
			while((temp = br.readLine())!=null){
				for(int i = 0 ;i<LocalData.permissions.length ; i++){
					if(temp.indexOf(LocalData.permissions[i]) > -1){
						array[i] = 1 ;
					}
				}
			}
			br.close();
			fileReader.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally{
			
		}
		//输出应用申请的权限
		permissionsOutput(array);
	}
	
	private static void permissionsOutput(int[] is) {
		for(int i = 0 ; i < is.length ; i++){
			if(is[i] == 1){
				System.out.print((char)('a'+i));
			}
		}
	}
	
	/*private static void copyFile() {
		// TODO Auto-generated method stub
		int i = 0;
		Iterator<Integer> it = set.iterator();
		while(it.hasNext()){
			i = it.next();
			System.out.println("case:" + i);
			switch(i){
			   case 1: Tools.copyFile(sourceFile, part_destinationDirectory + "1get_callvoice/", apkName);break;
			   case 2: Tools.copyFile(sourceFile, part_destinationDirectory + "2get_outcall_number/", apkName); break;
			   case 3: Tools.copyFile(sourceFile, part_destinationDirectory + "3get_call_record/", apkName);break;
			   case 4: Tools.copyFile(sourceFile, part_destinationDirectory + "4get_contacts/", apkName);	break;
			   case 5: Tools.copyFile(sourceFile, part_destinationDirectory + "5get_mms/", apkName);	break;
			   case 6: Tools.copyFile(sourceFile, part_destinationDirectory + "6get_sms/", apkName);	break;
			   case 7: Tools.copyFile(sourceFile, part_destinationDirectory + "7get_log_info/", apkName);break;
			   case 8: Tools.copyFile(sourceFile, part_destinationDirectory + "8get_profile_info/", apkName);break;
			   case 9: Tools.copyFile(sourceFile, part_destinationDirectory + "9get_history_and_bookmarkets/", apkName);break;
			   case 10: Tools.copyFile(sourceFile, part_destinationDirectory + "10get_sdcard_file/", apkName);break;
			   case 11: Tools.copyFile(sourceFile, part_destinationDirectory + "11get_phone_info/", apkName);break;
			   case 12: Tools.copyFile(sourceFile, part_destinationDirectory + "12get_calender/", apkName);break;
			   case 13: Tools.copyFile(sourceFile, part_destinationDirectory + "13get_location/", apkName);break;
			}
		}
	}*/

}
